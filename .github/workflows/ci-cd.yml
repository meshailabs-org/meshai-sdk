name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"
  GCP_PROJECT_ID: meshv1
  GCP_REGION: us-central1
  REGISTRY_SERVICE_NAME: meshai-registry
  RUNTIME_SERVICE_NAME: meshai-runtime

jobs:
  # Code Quality & Testing
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: meshai_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"

    - name: Code formatting check
      run: |
        black --check --diff src/ tests/ scripts/
        isort --check-only --diff src/ tests/ scripts/

    - name: Linting
      run: |
        flake8 src/ tests/ scripts/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Type checking
      run: |
        mypy src/meshai --ignore-missing-imports

    - name: Unit tests
      run: |
        pytest tests/ -v --cov=src/meshai --cov-report=xml --cov-report=term-missing
      env:
        MESHAI_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/meshai_test
        MESHAI_REDIS_URL: redis://localhost:6379/0
        MESHAI_LOG_LEVEL: DEBUG

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Performance benchmarks
      run: |
        python tests/benchmarks/performance_benchmarks.py
      continue-on-error: true

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run Safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Google Container Registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: gcr.io/${{ env.GCP_PROJECT_ID }}/meshai-sdk
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration Tests (only on main branch)
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[all]"

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Run integration tests against live API
      run: |
        python scripts/integration-test.py
      env:
        MESHAI_REGISTRY_URL: https://api.meshai.dev
        MESHAI_RUNTIME_URL: https://api.meshai.dev
        MESHAI_LOG_LEVEL: INFO
      continue-on-error: true

  # Deploy to Production (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Deploy to Cloud Run
      run: |
        # Get the built image tag
        IMAGE_TAG="gcr.io/${{ env.GCP_PROJECT_ID }}/meshai-sdk:main-${{ github.sha }}"
        
        # Deploy Registry Service
        gcloud run deploy ${{ env.REGISTRY_SERVICE_NAME }} \
          --image=$IMAGE_TAG \
          --region=${{ env.GCP_REGION }} \
          --platform=managed \
          --port=8080 \
          --memory=512Mi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=10 \
          --timeout=300 \
          --concurrency=80 \
          --set-env-vars="SERVICE_TYPE=registry,MESHAI_LOG_LEVEL=info,ENVIRONMENT=production" \
          --set-env-vars="MESHAI_DATABASE_URL=${{ secrets.DATABASE_URL }}" \
          --set-env-vars="MESHAI_REDIS_URL=${{ secrets.REDIS_URL }}" \
          --vpc-connector=projects/${{ env.GCP_PROJECT_ID }}/locations/${{ env.GCP_REGION }}/connectors/meshai-connector \
          --allow-unauthenticated

        # Deploy Runtime Service  
        gcloud run deploy ${{ env.RUNTIME_SERVICE_NAME }} \
          --image=$IMAGE_TAG \
          --region=${{ env.GCP_REGION }} \
          --platform=managed \
          --port=8080 \
          --memory=512Mi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=10 \
          --timeout=300 \
          --concurrency=80 \
          --set-env-vars="SERVICE_TYPE=runtime,MESHAI_LOG_LEVEL=info,ENVIRONMENT=production" \
          --set-env-vars="MESHAI_DATABASE_URL=${{ secrets.DATABASE_URL }}" \
          --set-env-vars="MESHAI_REDIS_URL=${{ secrets.REDIS_URL }}" \
          --set-env-vars="MESHAI_REGISTRY_URL=https://api.meshai.dev" \
          --vpc-connector=projects/${{ env.GCP_PROJECT_ID }}/locations/${{ env.GCP_REGION }}/connectors/meshai-connector \
          --allow-unauthenticated

    - name: Post-deployment health check
      run: |
        sleep 30
        curl -f https://api.meshai.dev/health || exit 1
        echo "âœ… Deployment successful and healthy"

    - name: Notify deployment status
      run: |
        echo "ðŸš€ Successfully deployed MeshAI SDK"
        echo "ðŸ“Š Registry: https://api.meshai.dev"
        echo "ðŸ”§ Runtime: https://api.meshai.dev"